#!/bin/bash

libexec="$(cd "$(dirname "$0")" && pwd)"
. "${libexec}/base.sh"
. "${libexec}/version.sh"

check_env () {
    if [[ -n $2 ]]; then
        printf "prefix: warning: %s set and will be used\n" "$1"
    fi
}

fatal () {
    printf '%s\n\n' "$1" 1>&2
    exit 1
}

perm_dirs () {
    # TODO: skip if user can't sudo
    [[ ! $CH_TEST_PERMDIRS = 'skip' ]] || return 0
    printf '\nFile permission enforcement tests:\n'
    for d in $CH_TEST_PERMDIRS; do
        if [[ -d $d ]]; then
            # prevent the test suite from failing if the perm_dirs directory
            # exists
            if [[ -d "${d}/perms_test" ]]; then
                printf "%s/perms_test exists. removing...\n" "$d"
                sudo rm -rf "${d}/perms_test"
            fi
        else
            echo "permission directory target $d doesn't exist, creating it..."
            mkdir -p "$d"
        fi
    done
    echo
    for d in $CH_TEST_PERMDIRS; do
        sudo ./make-perms-test "$d" "$USER" nobody
    done
}

topdir=${ch_bin%/bin}
version=$(version 2>&1)

# Determine test directory.
if [[ -d "${topdir}/test" ]]; then
    # local install
    testdir=${topdir}/test

# prefix installation
elif [[ -d ${topdir}/libexec/charliecloud-${version} ]]; then
    # prefix installation
    testdir=${topdir}/libexec/charliecloud-${version}

# If you run ch-test with `./bin/ch-run` while your PWD is charliecloud/test,
# the symlink from bin to ../../../bin messes with the ch_bin variable from
# base.sh. We check if we are inside the test directory to avoid this.
elif [[ ${PWD##*/} == test ]] \
    && [[ -d run ]] \
    && [[ -e make-auto ]]; then
    testdir=$PWD
fi

# shellcheck disable=SC2034
usage=$(cat <<EOF
Run the Charliecloud test suite.

Usage:

  $ $(basename "$0") [ARGS ...] PHASE

You must have the charliecloud test suite installed.
EOF
)

parse_basic_args "$@"

if [ "$#" -lt 1 ]; then
    usage
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
    opt=$1; shift
    case $opt in
    build|run|examples|all|clean)
        [[ -z $phase ]] || fatal 'test phase may only be assigned once'
        phase=$opt
    ;;
    -p|--prefix=*)
        [[ -z $prefix ]] || fatal 'prefix: assigned more than once'
        if [[ $opt == '--prefix='* ]]; then
            prefix=${opt##*=}  # remove '--prefix='
            [[ -n $prefix ]] || fatal "prefix: invalid argument $opt"
        else
            prefix=$1; shift
        fi
        check_env 'CH_TEST_TARDIR'   "$CH_TEST_TARDIR"
        check_env 'CH_TEST_IMGDIR'   "$CH_TEST_IMGDIR"
        check_env 'CH_TEST_PERMDIRS' "$CH_TEST_PERMDIRS"
    ;;
    -s|--scope=*)
        [[ -z $scope ]] || fatal 'scope: assigned more than once'
        if [[ $opt = '--scope='* ]]; then
            scope=${opt##*=}  # remove '--scope='
        else
            scope=$1; shift
        fi
        check_env 'CH_TEST_SCOPE' "$CH_TEST_SCOPE"
    ;;
    --summary)
        summary=true
    ;;
    *)
        fatal "unrecognized argument: $opt"
    esac
done

# Sanity check
if [[ ! -d $testdir ]]; then
    notest=$(cat << EOF
Unable to locate the Charliecloud test suite. This is usually due to the
following:

    1. No suitable python version was detected during make install; or
    2. Charliecloud was installed via yum (epel) without the test package
       (yum install charliecloud-test)
EOF
)
    fatal "$notest"
fi

cd "$testdir"   || fatal 'cannot cd into the test directory'
[[ -n $phase ]] || fatal 'test phase not specified'

# Set environment
[[ -n $prefix ]]         || prefix=/var/tmp
[[ -n $scope ]]          || scope=standard
[[ -n $CH_TEST_TARDIR ]] || export CH_TEST_TARDIR=${prefix}/tar
[[ -n $CH_TEST_IMGDIR ]] || export CH_TEST_IMGDIR=${prefix}/dir
[[ -n $CH_TEST_SCOPE ]]  || export CH_TEST_SCOPE=$scope

if [[ -z $CH_TEST_PERMDIRS ]]; then
    if [[ $prefix == /var/tmp ]]; then
        export CH_TEST_PERMDIRS="/var/tmp /tmp" # default
    else
        export CH_TEST_PERMDIRS="$prefix"
    fi
fi

# Avoid cryptic bats error (#347) that occurs when setting a CH_TEST variable
# to a path where there are two or more directories that do not exist.
if [[ -z $summary ]]; then
    [[ -d $CH_TEST_TARDIR ]] || mkdir -p "$CH_TEST_TARDIR"
    [[ -d $CH_TEST_IMGDIR ]] || mkdir -p "$CH_TEST_IMGDIR"
fi

# Print test summary
if [[ $phase == clean ]]; then
    printf '\nclean targets: %s, %s, and perms_test subdir in %s\n\n' \
            "$CH_TEST_TARDIR" "$CH_TEST_IMGDIR" "${CH_TEST_PERMDIRS[*]}"
else
    printf '\nrunning tests from:     %s\n' "$testdir"
    printf 'CH_TEST_SCOPE           %s\n' "$CH_TEST_SCOPE"
    printf 'CH_TEST_TARDIR          %s\n' "$CH_TEST_TARDIR"
    printf 'CH_TEST_IMGDIR          %s\n' "$CH_TEST_IMGDIR"
    echo "CH_TEST_PERMDIRS        ${CH_TEST_PERMDIRS[*]}"
fi
[[ -z $summary ]] || exit 0

# Execute phase
case $phase in
    build)
        perm_dirs
        make test-build
    ;;
    run)
        make test-run
    ;;
    examples)
        make test-test
    ;;
    all)
        perm_dirs
        make test-build
        make test-run
        make test-test
    ;;
    clean)
        echo "rm -rf  $CH_TEST_TARDIR"
        rm -rf "$CH_TEST_TARDIR"
        echo "rm -rf $CH_TEST_IMGDIR"
        rm -rf "$CH_TEST_IMGDIR"
        for d in $CH_TEST_PERMDIRS; do
            if [[ -d ${d}/perms_test ]]; then
                echo "rm -rf ${d}/perm_dirs"
                rm -rf "${d}/perm_test"
            fi
        done
    ;;
esac
